/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace MiraiSimpleLens {
  export type ResponseIRMStruct = {
    kink: PromiseOrValue<BigNumberish>;
    baseAPY: PromiseOrValue<BigNumberish>;
    kinkAPY: PromiseOrValue<BigNumberish>;
    maxAPY: PromiseOrValue<BigNumberish>;
    baseSupplyAPY: PromiseOrValue<BigNumberish>;
    kinkSupplyAPY: PromiseOrValue<BigNumberish>;
    maxSupplyAPY: PromiseOrValue<BigNumberish>;
  };

  export type ResponseIRMStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    kink: BigNumber;
    baseAPY: BigNumber;
    kinkAPY: BigNumber;
    maxAPY: BigNumber;
    baseSupplyAPY: BigNumber;
    kinkSupplyAPY: BigNumber;
    maxSupplyAPY: BigNumber;
  };
}

export declare namespace Storage {
  export type AssetConfigStruct = {
    mTokenAddress: PromiseOrValue<string>;
    borrowIsolated: PromiseOrValue<boolean>;
    collateralFactor: PromiseOrValue<BigNumberish>;
    borrowFactor: PromiseOrValue<BigNumberish>;
    twapWindow: PromiseOrValue<BigNumberish>;
  };

  export type AssetConfigStructOutput = [
    string,
    boolean,
    number,
    number,
    number
  ] & {
    mTokenAddress: string;
    borrowIsolated: boolean;
    collateralFactor: number;
    borrowFactor: number;
    twapWindow: number;
  };
}

export interface MiraiSimpleLensInterface extends utils.Interface {
  functions: {
    "exec()": FunctionFragment;
    "getAccountStatus(address)": FunctionFragment;
    "getDTokenBalance(address,address)": FunctionFragment;
    "getEnteredMarkets(address)": FunctionFragment;
    "getMTokenBalance(address,address)": FunctionFragment;
    "getMiraiAccountAllowance(address,address)": FunctionFragment;
    "getPTokenBalance(address,address)": FunctionFragment;
    "getPriceFull(address)": FunctionFragment;
    "getPricingConfig(address)": FunctionFragment;
    "getTokenInfo(address)": FunctionFragment;
    "getTotalSupplyAndDebts(address)": FunctionFragment;
    "interestAccumulator(address)": FunctionFragment;
    "interestRateModel(address)": FunctionFragment;
    "interestRates(address)": FunctionFragment;
    "irmSettings(address)": FunctionFragment;
    "markets()": FunctionFragment;
    "mirai()": FunctionFragment;
    "moduleGitCommit()": FunctionFragment;
    "reserveFee(address)": FunctionFragment;
    "underlyingToAssetConfig(address)": FunctionFragment;
    "underlyingToDToken(address)": FunctionFragment;
    "underlyingToInternalTokens(address)": FunctionFragment;
    "underlyingToMToken(address)": FunctionFragment;
    "underlyingToPToken(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "exec"
      | "getAccountStatus"
      | "getDTokenBalance"
      | "getEnteredMarkets"
      | "getMTokenBalance"
      | "getMiraiAccountAllowance"
      | "getPTokenBalance"
      | "getPriceFull"
      | "getPricingConfig"
      | "getTokenInfo"
      | "getTotalSupplyAndDebts"
      | "interestAccumulator"
      | "interestRateModel"
      | "interestRates"
      | "irmSettings"
      | "markets"
      | "mirai"
      | "moduleGitCommit"
      | "reserveFee"
      | "underlyingToAssetConfig"
      | "underlyingToDToken"
      | "underlyingToInternalTokens"
      | "underlyingToMToken"
      | "underlyingToPToken"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "exec", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAccountStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDTokenBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEnteredMarkets",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMTokenBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMiraiAccountAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPTokenBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceFull",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPricingConfig",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSupplyAndDebts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "interestAccumulator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRateModel",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRates",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "irmSettings",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "markets", values?: undefined): string;
  encodeFunctionData(functionFragment: "mirai", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "moduleGitCommit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToAssetConfig",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToDToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToInternalTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToMToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToPToken",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "exec", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnteredMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMiraiAccountAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceFull",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPricingConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSupplyAndDebts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestAccumulator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "irmSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mirai", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moduleGitCommit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserveFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToAssetConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToDToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToInternalTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToMToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToPToken",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MiraiSimpleLens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MiraiSimpleLensInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    exec(overrides?: CallOverrides): Promise<[string]>;

    getAccountStatus(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        collateralValue: BigNumber;
        liabilityValue: BigNumber;
        healthScore: BigNumber;
      }
    >;

    getDTokenBalance(
      underlying: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEnteredMarkets(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getMTokenBalance(
      underlying: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMiraiAccountAllowance(
      underlying: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPTokenBalance(
      underlying: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceFull(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        twap: BigNumber;
        twapPeriod: BigNumber;
        currPrice: BigNumber;
      }
    >;

    getPricingConfig(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, string] & {
        pricingType: number;
        pricingParameters: number;
        pricingForwarded: string;
      }
    >;

    getTokenInfo(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { name: string; symbol: string }>;

    getTotalSupplyAndDebts(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        poolSize: BigNumber;
        totalBalances: BigNumber;
        totalBorrows: BigNumber;
        reserveBalance: BigNumber;
      }
    >;

    interestAccumulator(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    interestRateModel(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    interestRates(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        borrowSPY: BigNumber;
        borrowAPY: BigNumber;
        supplyAPY: BigNumber;
      }
    >;

    irmSettings(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [MiraiSimpleLens.ResponseIRMStructOutput] & {
        r: MiraiSimpleLens.ResponseIRMStructOutput;
      }
    >;

    markets(overrides?: CallOverrides): Promise<[string]>;

    mirai(overrides?: CallOverrides): Promise<[string]>;

    moduleGitCommit(overrides?: CallOverrides): Promise<[string]>;

    reserveFee(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    underlyingToAssetConfig(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [Storage.AssetConfigStructOutput] & {
        config: Storage.AssetConfigStructOutput;
      }
    >;

    underlyingToDToken(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { dToken: string }>;

    underlyingToInternalTokens(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        mToken: string;
        dToken: string;
        pToken: string;
      }
    >;

    underlyingToMToken(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { mToken: string }>;

    underlyingToPToken(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { pToken: string }>;
  };

  exec(overrides?: CallOverrides): Promise<string>;

  getAccountStatus(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      collateralValue: BigNumber;
      liabilityValue: BigNumber;
      healthScore: BigNumber;
    }
  >;

  getDTokenBalance(
    underlying: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEnteredMarkets(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getMTokenBalance(
    underlying: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMiraiAccountAllowance(
    underlying: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPTokenBalance(
    underlying: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceFull(
    underlying: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      twap: BigNumber;
      twapPeriod: BigNumber;
      currPrice: BigNumber;
    }
  >;

  getPricingConfig(
    underlying: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [number, number, string] & {
      pricingType: number;
      pricingParameters: number;
      pricingForwarded: string;
    }
  >;

  getTokenInfo(
    underlying: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, string] & { name: string; symbol: string }>;

  getTotalSupplyAndDebts(
    underlying: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      poolSize: BigNumber;
      totalBalances: BigNumber;
      totalBorrows: BigNumber;
      reserveBalance: BigNumber;
    }
  >;

  interestAccumulator(
    underlying: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  interestRateModel(
    underlying: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  interestRates(
    underlying: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      borrowSPY: BigNumber;
      borrowAPY: BigNumber;
      supplyAPY: BigNumber;
    }
  >;

  irmSettings(
    underlying: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<MiraiSimpleLens.ResponseIRMStructOutput>;

  markets(overrides?: CallOverrides): Promise<string>;

  mirai(overrides?: CallOverrides): Promise<string>;

  moduleGitCommit(overrides?: CallOverrides): Promise<string>;

  reserveFee(
    underlying: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  underlyingToAssetConfig(
    underlying: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Storage.AssetConfigStructOutput>;

  underlyingToDToken(
    underlying: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  underlyingToInternalTokens(
    underlying: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      mToken: string;
      dToken: string;
      pToken: string;
    }
  >;

  underlyingToMToken(
    underlying: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  underlyingToPToken(
    underlying: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    exec(overrides?: CallOverrides): Promise<string>;

    getAccountStatus(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        collateralValue: BigNumber;
        liabilityValue: BigNumber;
        healthScore: BigNumber;
      }
    >;

    getDTokenBalance(
      underlying: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEnteredMarkets(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getMTokenBalance(
      underlying: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMiraiAccountAllowance(
      underlying: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPTokenBalance(
      underlying: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceFull(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        twap: BigNumber;
        twapPeriod: BigNumber;
        currPrice: BigNumber;
      }
    >;

    getPricingConfig(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, string] & {
        pricingType: number;
        pricingParameters: number;
        pricingForwarded: string;
      }
    >;

    getTokenInfo(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { name: string; symbol: string }>;

    getTotalSupplyAndDebts(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        poolSize: BigNumber;
        totalBalances: BigNumber;
        totalBorrows: BigNumber;
        reserveBalance: BigNumber;
      }
    >;

    interestAccumulator(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestRateModel(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestRates(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        borrowSPY: BigNumber;
        borrowAPY: BigNumber;
        supplyAPY: BigNumber;
      }
    >;

    irmSettings(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<MiraiSimpleLens.ResponseIRMStructOutput>;

    markets(overrides?: CallOverrides): Promise<string>;

    mirai(overrides?: CallOverrides): Promise<string>;

    moduleGitCommit(overrides?: CallOverrides): Promise<string>;

    reserveFee(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    underlyingToAssetConfig(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Storage.AssetConfigStructOutput>;

    underlyingToDToken(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    underlyingToInternalTokens(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        mToken: string;
        dToken: string;
        pToken: string;
      }
    >;

    underlyingToMToken(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    underlyingToPToken(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    exec(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountStatus(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDTokenBalance(
      underlying: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEnteredMarkets(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMTokenBalance(
      underlying: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMiraiAccountAllowance(
      underlying: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPTokenBalance(
      underlying: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceFull(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPricingConfig(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenInfo(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSupplyAndDebts(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestAccumulator(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestRateModel(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestRates(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    irmSettings(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    markets(overrides?: CallOverrides): Promise<BigNumber>;

    mirai(overrides?: CallOverrides): Promise<BigNumber>;

    moduleGitCommit(overrides?: CallOverrides): Promise<BigNumber>;

    reserveFee(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingToAssetConfig(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingToDToken(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingToInternalTokens(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingToMToken(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingToPToken(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    exec(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountStatus(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDTokenBalance(
      underlying: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEnteredMarkets(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMTokenBalance(
      underlying: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMiraiAccountAllowance(
      underlying: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPTokenBalance(
      underlying: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceFull(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPricingConfig(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenInfo(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalSupplyAndDebts(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interestAccumulator(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interestRateModel(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interestRates(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    irmSettings(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    markets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mirai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moduleGitCommit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveFee(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingToAssetConfig(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingToDToken(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingToInternalTokens(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingToMToken(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingToPToken(
      underlying: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
